/**
 ============================================================================
 * @file     lsm303dlh.h
 * @brief    Interface for HMC5883L 3-axis magnetometer
 * @version  V4.11.1.80
 * @date     8 June 2017
 * @author   podonoghue
 ============================================================================
 */

#ifndef SOURCES_LSM303DLH_H_
#define SOURCES_LSM303DLH_H_
 /*
 * *****************************
 * *** DO NOT EDIT THIS FILE ***
 * *****************************
 *
 * This file is generated automatically.
 * Any manual changes will be lost.
 */
#include <stdint.h>
#include "vector.h"
#include "i2c.h"

namespace USBDM {

/**
 * @addtogroup LSM303DLH_Group LSM303DLH 3-axis magnetometer + Accelerometer
 * @brief C++ Class allowing interface to LSM303DLH
 * @{
 */

/**
 * @brief Class representing an interface for LSM303DLH over I2C
 *
 * <b>Example</b>
 * @code
 *  // Instantiate interface
 *  I2c     *i2c   = new I2C_0();
 *  LSM303DLH *magnetometer = new LSM303DLH(i2c);
 *
 *  int      status;
 *  int16_t  x, y, z;
 *
 *  magnetometer->readMagnetometerXYZ(&status, &x, &y, &z);
 *
 * @endcode
 */
class LSM303DLH {

public:
   enum AccelDataRate {
      AccelDataRate_Off              = (0<<5)|(0<<3),
      AccelDataRate_lowPower_0_50Hz  = (2<<5)|(0<<3),
      AccelDataRate_lowPower_1Hz     = (3<<5)|(0<<3),
      AccelDataRate_lowPower_2Hz     = (4<<5)|(0<<3),
      AccelDataRate_lowPower_5Hz     = (5<<5)|(0<<3),
      AccelDataRate_lowPower_10Hz    = (6<<5)|(0<<3),
      AccelDataRate_50Hz             = (1<<5)|(0<<3),
      AccelDataRate_100Hz            = (1<<5)|(1<<3),
      AccelDataRate_400Hz            = (1<<5)|(2<<3),
      AccelDataRate_1000Hz           = (1<<5)|(3<<3),
   };

   static constexpr uint8_t cr1Value(AccelDataRate accelDataRate, bool xEn=true, bool yEn=true, bool zEn=true) {
      return (accelDataRate | (xEn?(1<<2):0) | (yEn?(1<<1):0) | (zEn?(1<<1):0));
   }

   /**
    * Set Accelerometer configuration
    *
    * @param accelDataRate Rate of measurements
    * @param xEn           Enable X axis measurements
    * @param yEn           Enable Y axis measurements
    * @param zEn           Enable Z axis measurements
    */
   void setAccelConfiguration(
         AccelDataRate accelDataRate = AccelDataRate_50Hz,
         bool xEn=true,
         bool yEn=true,
         bool zEn=true);

   enum MagBias {
      MagBias_Normal     = 0,
      MagBias_Positive   = 1,
      MagBias_Negative   = 2,
   };

   enum MagDataRate {
      MagDataRate_0_75_Hz  = 0,
      MagDataRate_1_5_Hz   = 1,
      MagDataRate_3_Hz     = 2,
      MagDataRate_7_5_Hz   = 3,
      MagDataRate_15_Hz    = 4,
      MagDataRate_30_Hz    = 5,
      MagDataRate_75_Hz    = 6,
   };

   enum MagAverages {
      MagAverages_1   = 0,
//      MagAverages_2   = 1,
//      MagAverages_4   = 2,
//      MagAverages_8   = 3,
   };

   static constexpr uint8_t craValue(MagAverages, MagBias magBias, MagDataRate dataRate) {
      return ((magBias&0x3)<<0)|((dataRate&0x7)<<2);
   }

   enum MagRange {
//      MagRange_0_88  = 0,
      MagRange_1_3   = 1,
      MagRange_1_9   = 2,
      MagRange_2_5   = 3,
      MagRange_4_0   = 4,
      MagRange_4_7   = 5,
      MagRange_5_6   = 6,
      MagRange_8_1   = 7,
   };

   static constexpr uint8_t crbValue(MagRange magRange) {
      return ((magRange&0x7)<<5);
   }

   enum MagMode {
      MagMode_Continuous  = 0,
      MagMode_Single      = 1,
      MagMode_Sleep       = 3,
   };

protected:
   I2c &i2c;

   static const uint8_t accelAddress = 0x18;
   static const uint8_t magAddress   = 0x3C;

public:
   /**
    * Constructor
    *
    * @param i2c - I2C interface to use
    */
   LSM303DLH(I2c &i2c);

   /**
    * Destructor
    */
   virtual ~LSM303DLH() {
   }

   /**
    * Read ID from compass
    *
    * @return ID value as 24-bit number (0x483433 for HMC5883L)
    */
   uint32_t readID(void);

   /**
    * Set compass range and hence gain on all channels
    *
    * @param magRange
    *
    * <pre>
    * G    Recommended    Gain        Resolution
    * 321  Sensor Range   (LSB/Gauss) (mGauss/LSB)
    * 000   +/- 0.88 Ga    1370        0.73
    * 001   +/- 1.3  Ga    1090        0.92 (default)
    * 010   +/- 1.9  Ga     820        1.22
    * 011   +/- 2.5  Ga     660        1.52
    * 100   +/- 4.0  Ga     440        2.27
    * 101   +/- 4.7  Ga     390        2.56
    * 110   +/- 5.6  Ga     330        3.03
    * 111   +/- 8.1  Ga     230        4.35
    * </pre>
    */
   void setMagRange(MagRange magRange);

   /**
    * Set Magnetometer configuration
    *
    * @param[in] magBias
    * @param[in] magDataRate
    * @param[in] magRange
    * @param[in] magAverages
    */
   void setMagConfiguration(
         MagDataRate magDataRate = MagDataRate_15_Hz,
         MagRange    magRange    = MagRange_2_5,
         MagAverages magAverages = MagAverages_1,
         MagBias     magBias     = MagBias_Normal);

   /**
    * Do a single triggered measurement of magnetic field
    *
    * @param[out] vector - Vector for result
    */
   void doMeasurement(Vector &vector);

//   void calibrate();
};

/**
 * @}
 */

} // End namespace USBDM

#endif /* SOURCES_LSM303DLH_H_ */
